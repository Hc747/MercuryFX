organisation {
id: PK : VARCHAR(10);
api_key : VARCHAR(32);
name : VARCHAR(40);
registration_date : DATE;
subscription_expiration : DATE;
}

user {
id : PK : Integer;
organisation_id : FK -> organisation;
name : VARCHAR(32);
password: CHAR BINARY(60); (used to store BCrypt output)
privilege : ENUM TYPE; (founder, administrator, user)
suspended : Boolean; (denotes whether or not the account currently has access to the service)
}

feedback {
id : PK : Integer;
user_id : FK -> user;
category : ENUM TYPE; (suggestion, issue, error [generated by app], general)
message : VARCHAR(250);
}

species {

}

breed {

}

... in login protocol
final Task<String> hashed_password = new Task<> () {
    ...
    }

    final Task<User> login = 
...

//TODO consider using ID as PK, as it may be quicker.

Each shelter is an organisation, and must be identifiable by their unique shelter_code.
Each organisation must be able to grant access to resources externally through a combination of their shelter_code and api_key - api_key's should be the output of a secure hashing algorithm, but do not explicitly have to be unique.
Each user can only be a member of one organisation, thus allowing for organisation A and organisation B to both have a user named 'admin'.

Each action taken by a user must be logged (inclusive of login attempts).
Login attempts must be throttled after X failed attempts.
JSON and text based protocol, as opposed to opcodes.
Users should disconnect after 15 minutes of inactivity.

Any actions taken by a user should occur as such:
- if the organisation has an active subscription, in the organisations own cluster (executor service, etc).
- if the organisation does not have an active subscription, in the public cluster (able to be saturated).